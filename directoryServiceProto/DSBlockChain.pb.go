// Code generated by protoc-gen-go. DO NOT EDIT.
// source: DSBlockChain.proto

package DSBlockMessage

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetDSBlockRequest struct {
	Blocknum             uint64   `protobuf:"varint,1,opt,name=blocknum,proto3" json:"blocknum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDSBlockRequest) Reset()         { *m = GetDSBlockRequest{} }
func (m *GetDSBlockRequest) String() string { return proto.CompactTextString(m) }
func (*GetDSBlockRequest) ProtoMessage()    {}
func (*GetDSBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_21ac1a5dc41ecc68, []int{0}
}

func (m *GetDSBlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDSBlockRequest.Unmarshal(m, b)
}
func (m *GetDSBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDSBlockRequest.Marshal(b, m, deterministic)
}
func (m *GetDSBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDSBlockRequest.Merge(m, src)
}
func (m *GetDSBlockRequest) XXX_Size() int {
	return xxx_messageInfo_GetDSBlockRequest.Size(m)
}
func (m *GetDSBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDSBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDSBlockRequest proto.InternalMessageInfo

func (m *GetDSBlockRequest) GetBlocknum() uint64 {
	if m != nil {
		return m.Blocknum
	}
	return 0
}

type GetDSBlockchainRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDSBlockchainRequest) Reset()         { *m = GetDSBlockchainRequest{} }
func (m *GetDSBlockchainRequest) String() string { return proto.CompactTextString(m) }
func (*GetDSBlockchainRequest) ProtoMessage()    {}
func (*GetDSBlockchainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_21ac1a5dc41ecc68, []int{1}
}

func (m *GetDSBlockchainRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDSBlockchainRequest.Unmarshal(m, b)
}
func (m *GetDSBlockchainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDSBlockchainRequest.Marshal(b, m, deterministic)
}
func (m *GetDSBlockchainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDSBlockchainRequest.Merge(m, src)
}
func (m *GetDSBlockchainRequest) XXX_Size() int {
	return xxx_messageInfo_GetDSBlockchainRequest.Size(m)
}
func (m *GetDSBlockchainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDSBlockchainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDSBlockchainRequest proto.InternalMessageInfo

type GetDSBlockchainResponse struct {
	Blocks               []*ProtoDSBlock `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetDSBlockchainResponse) Reset()         { *m = GetDSBlockchainResponse{} }
func (m *GetDSBlockchainResponse) String() string { return proto.CompactTextString(m) }
func (*GetDSBlockchainResponse) ProtoMessage()    {}
func (*GetDSBlockchainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_21ac1a5dc41ecc68, []int{2}
}

func (m *GetDSBlockchainResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDSBlockchainResponse.Unmarshal(m, b)
}
func (m *GetDSBlockchainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDSBlockchainResponse.Marshal(b, m, deterministic)
}
func (m *GetDSBlockchainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDSBlockchainResponse.Merge(m, src)
}
func (m *GetDSBlockchainResponse) XXX_Size() int {
	return xxx_messageInfo_GetDSBlockchainResponse.Size(m)
}
func (m *GetDSBlockchainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDSBlockchainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDSBlockchainResponse proto.InternalMessageInfo

func (m *GetDSBlockchainResponse) GetBlocks() []*ProtoDSBlock {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func init() {
	proto.RegisterType((*GetDSBlockRequest)(nil), "DSBlockMessage.GetDSBlockRequest")
	proto.RegisterType((*GetDSBlockchainRequest)(nil), "DSBlockMessage.GetDSBlockchainRequest")
	proto.RegisterType((*GetDSBlockchainResponse)(nil), "DSBlockMessage.GetDSBlockchainResponse")
}

func init() { proto.RegisterFile("DSBlockChain.proto", fileDescriptor_21ac1a5dc41ecc68) }

var fileDescriptor_21ac1a5dc41ecc68 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x72, 0x09, 0x76, 0xca,
	0xc9, 0x4f, 0xce, 0x76, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x83, 0x8a, 0xf9, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x4a, 0x89, 0xa0, 0xf2, 0x21, 0xaa, 0x94,
	0xf4, 0xb9, 0x04, 0xdd, 0x53, 0x4b, 0xa0, 0x52, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42,
	0x52, 0x5c, 0x1c, 0x49, 0x20, 0x7e, 0x5e, 0x69, 0xae, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x4b, 0x10,
	0x9c, 0xaf, 0x24, 0xc1, 0x25, 0x86, 0xd0, 0x90, 0x0c, 0xb2, 0x0f, 0xaa, 0x4b, 0xc9, 0x9f, 0x4b,
	0x1c, 0x43, 0xa6, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0xc8, 0x84, 0x8b, 0x0d, 0x6c, 0x40, 0xb1,
	0x04, 0xa3, 0x02, 0xb3, 0x06, 0xb7, 0x91, 0x8c, 0x1e, 0x9a, 0x63, 0x02, 0x40, 0x8e, 0x81, 0xb9,
	0x02, 0xaa, 0xd6, 0xa8, 0x8f, 0x89, 0x8b, 0x07, 0xd9, 0x38, 0x21, 0x4f, 0x2e, 0xae, 0x80, 0x52,
	0x98, 0x0d, 0x42, 0xd2, 0xe8, 0x86, 0xf8, 0xe5, 0xa7, 0xa4, 0x42, 0x85, 0xa4, 0xf0, 0xda, 0xa0,
	0xc4, 0x20, 0x94, 0xc4, 0xc5, 0xeb, 0x9e, 0x5a, 0x82, 0x64, 0xb6, 0x1a, 0xba, 0x06, 0xec, 0xbe,
	0x94, 0x52, 0x27, 0xa8, 0x0e, 0xe2, 0x67, 0x25, 0x06, 0x21, 0x7f, 0x2e, 0x2e, 0x84, 0xa4, 0x90,
	0x22, 0x6e, 0x8d, 0x30, 0xb3, 0x09, 0x38, 0x3a, 0x89, 0x0d, 0x1c, 0x67, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x5b, 0x5d, 0xc7, 0xa2, 0xef, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DSBlockchainClient is the client API for DSBlockchain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DSBlockchainClient interface {
	// Add a Directory Service block to DS Blockchain
	PutDSBlock(ctx context.Context, in *NodeDSBlock, opts ...grpc.CallOption) (*ProtoDSBlock, error)
	GetBlockchain(ctx context.Context, in *GetDSBlockchainRequest, opts ...grpc.CallOption) (*GetDSBlockchainResponse, error)
	GetDSBlock(ctx context.Context, in *GetDSBlockRequest, opts ...grpc.CallOption) (*ProtoDSBlock, error)
}

type dSBlockchainClient struct {
	cc *grpc.ClientConn
}

func NewDSBlockchainClient(cc *grpc.ClientConn) DSBlockchainClient {
	return &dSBlockchainClient{cc}
}

func (c *dSBlockchainClient) PutDSBlock(ctx context.Context, in *NodeDSBlock, opts ...grpc.CallOption) (*ProtoDSBlock, error) {
	out := new(ProtoDSBlock)
	err := c.cc.Invoke(ctx, "/DSBlockMessage.DSBlockchain/PutDSBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSBlockchainClient) GetBlockchain(ctx context.Context, in *GetDSBlockchainRequest, opts ...grpc.CallOption) (*GetDSBlockchainResponse, error) {
	out := new(GetDSBlockchainResponse)
	err := c.cc.Invoke(ctx, "/DSBlockMessage.DSBlockchain/GetBlockchain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSBlockchainClient) GetDSBlock(ctx context.Context, in *GetDSBlockRequest, opts ...grpc.CallOption) (*ProtoDSBlock, error) {
	out := new(ProtoDSBlock)
	err := c.cc.Invoke(ctx, "/DSBlockMessage.DSBlockchain/GetDSBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DSBlockchainServer is the server API for DSBlockchain service.
type DSBlockchainServer interface {
	// Add a Directory Service block to DS Blockchain
	PutDSBlock(context.Context, *NodeDSBlock) (*ProtoDSBlock, error)
	GetBlockchain(context.Context, *GetDSBlockchainRequest) (*GetDSBlockchainResponse, error)
	GetDSBlock(context.Context, *GetDSBlockRequest) (*ProtoDSBlock, error)
}

func RegisterDSBlockchainServer(s *grpc.Server, srv DSBlockchainServer) {
	s.RegisterService(&_DSBlockchain_serviceDesc, srv)
}

func _DSBlockchain_PutDSBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeDSBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSBlockchainServer).PutDSBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DSBlockMessage.DSBlockchain/PutDSBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSBlockchainServer).PutDSBlock(ctx, req.(*NodeDSBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSBlockchain_GetBlockchain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDSBlockchainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSBlockchainServer).GetBlockchain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DSBlockMessage.DSBlockchain/GetBlockchain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSBlockchainServer).GetBlockchain(ctx, req.(*GetDSBlockchainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSBlockchain_GetDSBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDSBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSBlockchainServer).GetDSBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DSBlockMessage.DSBlockchain/GetDSBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSBlockchainServer).GetDSBlock(ctx, req.(*GetDSBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DSBlockchain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DSBlockMessage.DSBlockchain",
	HandlerType: (*DSBlockchainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutDSBlock",
			Handler:    _DSBlockchain_PutDSBlock_Handler,
		},
		{
			MethodName: "GetBlockchain",
			Handler:    _DSBlockchain_GetBlockchain_Handler,
		},
		{
			MethodName: "GetDSBlock",
			Handler:    _DSBlockchain_GetDSBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "DSBlockChain.proto",
}
